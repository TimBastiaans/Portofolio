{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\Tim_B\\\\OneDrive\\\\Bureaublad\\\\Projecten\\\\Portofolio\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"C:\\\\Users\\\\Tim_B\\\\OneDrive\\\\Bureaublad\\\\Projecten\\\\Portofolio\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tim_B\\\\OneDrive\\\\Bureaublad\\\\Projecten\\\\Portofolio\\\\src\\\\containers\\\\projects\\\\Projects.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n          {\\n            repositoryOwner(login: \\\"\", \"\\\") {\\n              ... on User {\\n                pinnedRepositories(first: 6) {\\n                  edges {\\n                    node {\\n                      nameWithOwner\\n                      description\\n                      forkCount\\n                      stargazers {\\n                        totalCount\\n                      }\\n                      url\\n                      id\\n                      diskUsage\\n                      primaryLanguage {\\n                        name\\n                        color\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport GithubRepoCard from \"../../components/githubRepoCard/GithubRepoCard\";\nimport Button from \"../../components/button/Button\";\nimport { openSource } from \"../../portfolio\";\nexport default function Projects() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        repo = _useState2[0],\n        setrepo = _useState2[1];\n\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: \"Bearer \".concat(atob(openSource.githubConvertedToken))\n          }\n        });\n      }\n    });\n    client.query({\n      query: gql(_templateObject(), openSource.githubUserName)\n    }).then(result => {\n      setrepoFunction(result.data.repositoryOwner.pinnedRepositories.edges);\n      console.log(result);\n    });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"main\",\n    id: \"opensource\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"project-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Open Source Projects\"), React.createElement(\"div\", {\n    className: \"repo-cards-div-main\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, repo.map((v, i) => {\n    return React.createElement(GithubRepoCard, {\n      repo: v,\n      key: v.node.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  })), React.createElement(Button, {\n    text: \"More Projects\",\n    className: \"project-button\",\n    href: \"https://github.com/TimBastiaans\",\n    newTab: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/Tim_B/OneDrive/Bureaublad/Projecten/Portofolio/src/containers/projects/Projects.js"],"names":["React","useState","useEffect","ApolloClient","gql","GithubRepoCard","Button","openSource","Projects","repo","setrepo","getRepoData","client","uri","request","operation","setContext","headers","authorization","atob","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","repositoryOwner","pinnedRepositories","edges","console","log","array","map","v","i","node","id"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAO,eAAP;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA,oBACTP,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,QAC1BQ,IAD0B;AAAA,QACpBC,OADoB;;AAGjCR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASA,WAAT,GAAuB;AACrB,UAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BU,MAAAA,GAAG,EAAE,gCADyB;AAE9BC,MAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,QAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,mBAAYC,IAAI,CAACZ,UAAU,CAACa,oBAAZ,CAAhB;AADN;AADU,SAArB;AAKD;AAR6B,KAAjB,CAAf;AAWAR,IAAAA,MAAM,CACHS,KADH,CACS;AACLA,MAAAA,KAAK,EAAEjB,GAAF,oBAEyBG,UAAU,CAACe,cAFpC;AADA,KADT,EA8BGC,IA9BH,CA8BQC,MAAM,IAAI;AACdC,MAAAA,eAAe,CAACD,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BC,kBAA5B,CAA+CC,KAAhD,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACD,KAjCH;AAkCD;;AAED,WAASC,eAAT,CAAyBO,KAAzB,EAAgC;AAC9BtB,IAAAA,OAAO,CAACsB,KAAD,CAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,EAAE,EAAC,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,IAAI,CAACwB,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,WAAO,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAED,CAAtB;AAAyB,MAAA,GAAG,EAAEA,CAAC,CAACE,IAAF,CAAOC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CADH,CAFF,EAOE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,eAAd;AAA+B,IAAA,SAAS,EAAC,gBAAzC;AAA0D,IAAA,IAAI,EAAC,iCAA/D;AAAiG,IAAA,MAAM,EAAE,IAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAWD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { gql } from \"apollo-boost\";\r\nimport \"./Project.css\";\r\nimport GithubRepoCard from \"../../components/githubRepoCard/GithubRepoCard\";\r\nimport Button from \"../../components/button/Button\";\r\nimport { openSource } from \"../../portfolio\";\r\n\r\nexport default function Projects() {\r\n  const [repo, setrepo] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getRepoData();\r\n  }, []);\r\n\r\n  function getRepoData() {\r\n    const client = new ApolloClient({\r\n      uri: \"https://api.github.com/graphql\",\r\n      request: operation => {\r\n        operation.setContext({\r\n          headers: {\r\n            authorization: `Bearer ${atob(openSource.githubConvertedToken)}`\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    client\r\n      .query({\r\n        query: gql`\r\n          {\r\n            repositoryOwner(login: \"${openSource.githubUserName}\") {\r\n              ... on User {\r\n                pinnedRepositories(first: 6) {\r\n                  edges {\r\n                    node {\r\n                      nameWithOwner\r\n                      description\r\n                      forkCount\r\n                      stargazers {\r\n                        totalCount\r\n                      }\r\n                      url\r\n                      id\r\n                      diskUsage\r\n                      primaryLanguage {\r\n                        name\r\n                        color\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        `\r\n      })\r\n      .then(result => {\r\n        setrepoFunction(result.data.repositoryOwner.pinnedRepositories.edges);\r\n        console.log(result);\r\n      });\r\n  }\r\n\r\n  function setrepoFunction(array) {\r\n    setrepo(array);\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\" id=\"opensource\">\r\n      <h1 className=\"project-title\">Open Source Projects</h1>\r\n      <div className=\"repo-cards-div-main\">\r\n        {repo.map((v, i) => {\r\n          return <GithubRepoCard repo={v} key={v.node.id} />;\r\n        })}\r\n      </div>\r\n      <Button text={\"More Projects\"} className=\"project-button\" href=\"https://github.com/TimBastiaans\" newTab={true} />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}